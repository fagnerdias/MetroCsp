-- especificação de um sistema de estaão de metrô com chegada de trens e pessoas 
-- chegada de trens na estação, abertura de portas para a entrada de pessoas


-- BC: basic comand
datatype BC =  aproximar | chegar | parar | esperar |entrar | sair
datatype BCDOOR = abrir | fechar

channel	trem:BC
channel pessoa:BC
channel porta:BCDOOR

METROS = trem.aproximar -> trem.chegar -> trem.parar -> trem.sair -> METROS

PESSOAS = pessoa.aproximar -> pessoa.chegar -> pessoa.esperar -> pessoa.entrar -> pessoa.sair -> PESSOAS

PORTA = porta.abrir -> porta.fechar -> PORTA

ALF_T = {| trem |}
ALF_P = {| pessoa |}
ALF_DOOR = {| porta |}


ESTACAO  = trem.aproximar -> trem.chegar -> trem.parar -> (TREM_SAIR [] TREM_AGR)

TREM_AGR = trem.esperar -> PORTA_EST

PORTA_EST = porta.abrir ->( PORTA_EST [] porta.fechar -> TREM_SAIR)

TREM_SAIR = trem.sair -> ESTACAO

ALF_EST = {| trem, porta |}
ALF_P_EST = {| pessoa, porta |}

PESSOAS_EST = porta.abrir -> (PESSOA_IN [] PESSOA_OUT)

PESSOA_IN = pessoa.entrar -> pessoa.esperar -> (porta.fechar -> PESSOA_ON [] pessoa.sair -> PESSOA_OUT)

PESSOA_ON = pessoa.esperar -> (PESSOA_ON [] porta.abrir -> pessoa.sair -> PESSOA_OUT) 

PESSOA_OUT = porta.fechar -> PESSOAS_EST

-- fazer o paralelismo entre uma estação de trem e pessoas chegando
ESTACAO2 = PESSOAS_EST [ALF_P_EST || ALF_EST] ESTACAO

assert ESTACAO2 :[deadlock free]



channel estacao:{1 .. 3}
channel qnt_trens:{1 .. 3}

ESTACAO3(n) = if(n == 3)
					then trem.aproximar -> STOP
					else trem.aproximar -> estacao.n -> ESTACAO3(n + 1)
EST = ESTACAO3(1)					
