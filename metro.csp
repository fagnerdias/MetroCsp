-- especificação de um sistema de estaão de metrô com chegada de trens e pessoas 
-- chegada de trens na estação, abertura de portas para a entrada de pessoas

EST_ID = {0 .. 2}
TREM_ID = {0 ..2}
PEOPLE_ID = {0 .. 10}


-- BC: basic comand
datatype BC =  aproximar | chegar | parar | esperar |entrar | sair
datatype BCDOOR = abrir | fechar


channel estacao:TREM_ID.BC.EST_ID
channel people: PEOPLE_ID.BC.EST_ID
channel door:TREM_ID.BCDOOR.EST_ID
channel	trem:BC
channel pessoa:BC
channel porta:BCDOOR

METROS = trem.aproximar -> trem.chegar -> trem.parar -> trem.sair -> METROS

PESSOAS = pessoa.aproximar -> pessoa.chegar -> pessoa.esperar -> pessoa.entrar -> pessoa.sair -> PESSOAS

PORTA = porta.abrir -> porta.fechar -> PORTA

ALF_T = {| trem |}
ALF_P = {| pessoa |}
ALF_DOOR = {| porta |}


ESTACAO  = trem.aproximar -> trem.chegar -> trem.parar -> (TREM_SAIR [] TREM_AGR)

TREM_AGR = trem.esperar -> PORTA_EST

PORTA_EST = porta.abrir ->( PORTA_EST [] porta.fechar -> TREM_SAIR )

TREM_SAIR = trem.sair -> ESTACAO

ALF_EST = {| trem, porta |}
ALF_P_EST = {| pessoa, porta |}

PESSOAS_EST = porta.abrir -> (PESSOA_IN [] PESSOA_OUT)

PESSOA_IN = pessoa.entrar -> pessoa.esperar -> (porta.fechar -> PESSOA_ON [] pessoa.sair -> PESSOA_OUT)

PESSOA_ON = pessoa.esperar -> (PESSOA_ON [] porta.abrir -> pessoa.sair -> PESSOA_OUT) 

PESSOA_OUT = porta.fechar -> PESSOAS_EST

-- fazer o paralelismo entre uma estação de trem e pessoas chegando
ESTACAO2 = PESSOAS_EST [ALF_P_EST || ALF_EST] ESTACAO

assert ESTACAO2 :[deadlock free]

----------------------------------------------------------------

-- fazer varios trens e varias pessoas 
-- i -> ID do trem, e -> ID da estação
TRENS(i,e) = estacao.i.aproximar.e -> estacao.i.chegar.e -> estacao.i.parar.e -> estacao.i.sair.e ->(if(e == 2) then STOP
																											else TRENS(i, e+1))

TESTE = TRENS(1,1) ||| TRENS(2,1)
---------------------------------------------------------------

PEOPLE(i, e) = people.i.aproximar?e:EST_ID -> people.i.chegar.e -> people.i.esperar.e -> people.i.entrar.e -> people.i.sair.e -> STOP
--TESTE2 = PEOPLE(1) ||| PEOPLE(2) ||| PEOPLE(3) ||| PEOPLE(4) ||| PEOPLE(5)

---------------------------------------------------------------

DOOR(i, e) = door.i.abrir.e -> door.i.fechar.e -> (if(e == 2) then STOP
														else DOOR(i, e+1))

TESTE3 = DOOR(1,1)

------------------------------------------------------------

SysTREM_DOOR(i,e) = estacao.i.aproximar.e -> estacao.i.chegar.e -> estacao.i.parar.e -> (SysTREM_Wait(i,e) [] SysTREM_LEAVE(i,e))

SysTREM_Wait(i,e) = estacao.i.esperar.e -> DOOR_OPEN(i,e)

DOOR_OPEN(i,e) = door.i.abrir.e -> (DOOR_OPEN(i,e) [] DOOR_CLOSE(i,e))

DOOR_CLOSE(i,e) = door.i.fechar.e -> SysTREM_LEAVE(i,e)

SysTREM_LEAVE(i,e) = estacao.i.sair.e -> (if(e == 2) then SysTREM_DOOR(0,0)
											else SysTREM_DOOR(i, e+1))

SysTESTE = SysTREM_DOOR(0,0)

assert SysTESTE :[deadlock free]

-------------------------------------------------------------

SysPEOPLE_SUBWAY(i,e, qnt_est, qnt_trem) = people.i.aproximar.e -> people.i.chegar.e ->  PEOPLE_SUB_WAIT(i,e, qnt_est+1, qnt_trem)

PEOPLE_SUB_WAIT(i,e, qnt_est, qnt_trem) = (people.i.esperar.e ->(PEOPLE_SUB_OUT(i,e,qnt_est-1, qnt_trem) [] PEOPLE_SUB_WAIT(i,e,qnt_est, qnt_trem))) [] SysPEOPLE_DOOR(i,e, qnt_est, qnt_trem)

SysPEOPLE_DOOR(i,e, qnt_est, qnt_trem) = door.i.abrir.e -> (if(qnt_est > 0) then (PEOPLE_IN(i,e, qnt_est-1, qnt_trem +1) [] (PEOPLE_SUB_OUT(i,e,qnt_est-1, qnt_trem) [] CLOSE_DOOR(i,e,qnt_est, qnt_trem)))
															else if (qnt_trem > 0) then (CLOSE_DOOR(i,e,qnt_est, qnt_trem) [] PEOPLE_LEAVE(i,e,qnt_est, qnt_trem-1) )
															else CLOSE_DOOR(i,e,qnt_est, qnt_trem))

PEOPLE_IN(i,e, qnt_est, qnt_trem) = people.i.entrar.e ->  (PEOPLE_LEAVE(i,e,qnt_est,qnt_trem-1) [] PEOPLE_WAIT(i,e,qnt_est, qnt_trem))

PEOPLE_WAIT(i,e, qnt_est, qnt_trem) = people.i.esperar.e -> DOOR_WAIT(i,e,qnt_est, qnt_trem)

DOOR_WAIT(i,e,qnt_est, qnt_trem) =  if (qnt_est > 0) then PEOPLE_WAIT(i,e, qnt_est, qnt_trem) [] (CLOSE_DOOR(i,e, qnt_est, qnt_trem) [] (PEOPLE_LEAVE(i,e,qnt_est, qnt_trem-1) [] PEOPLE_IN(i,e,qnt_est-1,qnt_trem+1))) 
									else CLOSE_DOOR(i,e,qnt_est, qnt_trem)

CLOSE_DOOR(i,e, qnt_est, qnt_trem) = door.i.fechar.e -> (if(e == 2) then SysPEOPLE_DOOR(0,0,0,0)
										else (SysPEOPLE_DOOR(i,e+1, qnt_est, qnt_trem) ))

PEOPLE_LEAVE(i,e, qnt_est, qnt_trem) = people.i.sair.e -> if (qnt_trem > 0) then (PEOPLE_LEAVE(i,e,qnt_est,qnt_trem -1) [] CLOSE_DOOR(i,e,qnt_est, qnt_trem))
												else DOOR_WAIT(i,e,qnt_est, qnt_trem)  
PEOPLE_SUB_OUT(i,e,qnt_est, qnt_trem) = people.i.sair.e -> SysPEOPLE_SUBWAY(0,0,0,0)												

SysTESTE2 = SysPEOPLE_SUBWAY(0,0,0,0) 

assert SysTESTE2 :[deadlock free]

-------------------------------------------------------------

SysTREM_SUBWAY(i,e) = SysTESTE[| {|door.i.fechar.e|} |] SysTESTE2 

SysTESTE5 = SysTREM_SUBWAY(0,0)

assert SysTESTE5 :[deadlock free]

-----------------------------------------------------------------

-- ESPECIFICAÇÕES
-- especificar que a porta só pode abrir quando o trem parar e esperar.
-- pessoas só podem entrar quando o trem estiver aguardando e a porta aberta.
-- o trem só pode sair quando a porta fechar.
-- pessoas só podem sair quando a porta estiver aberta.

--1º

RUN_ALF(i,e) = {people.i.aproximar.e, people.i.chegar.e, people.i.esperar.e, people.i.esperar.e, estacao.i.aproximar.e, estacao.i.chegar.e}

RUN(A) = [] x:A @ x -> RUN(A) 

ALF_SPEC_DOOR(i,e) = {estacao.i.parar.e, estacao.i.esperar.e, door.i.abrir.e, door.i.fechar.e, estacao.i.sair.e}

SPEC_DOOR_OPEN(i,e) = estacao.i.parar.e -> estacao.i.esperar.e -> door.i.abrir.e -> STOP

SPEC_DOOR_CLOSE(i,e) = door.i.abrir.e -> door.i.fechar.e -> estacao.i.sair.e -> STOP

SPEC_PEOPLE_IN(i,e) = door.i.abrir.e -> people.i.entrar.e

CONTROLE_TREM = SPEC_DOOR_OPEN(0,0)[ALF_SPEC_DOOR(0,0)||RUN_ALF(0,0)]RUN(RUN_ALF(0,0))

assert SysTESTE5 [T= CONTROLE_TREM

------------------------------------------------------------------

--SPEC_PEOPLE_DOOR(i,e) = 


