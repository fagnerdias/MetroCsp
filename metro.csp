-- especificação de um sistema de estaão de metrô com chegada de trens e pessoas 
-- chegada de trens na estação, abertura de portas para a entrada de pessoas

EST_ID = {0 .. 2}
TREM_ID = {0 ..2}
PEOPLE_QNT = {0 .. 10}


-- BC: basic comand
datatype BC =  aproximar | chegar | parar | esperar |entrar | sair
datatype BCDOOR = abrir | fechar


channel estacao:TREM_ID.BC.EST_ID
channel people: PEOPLE_QNT.BC.EST_ID
channel door:TREM_ID.BCDOOR.EST_ID
channel	trem:BC
channel pessoa:BC
channel porta:BCDOOR

METROS = trem.aproximar -> trem.chegar -> trem.parar -> trem.sair -> METROS

PESSOAS = pessoa.aproximar -> pessoa.chegar -> pessoa.esperar -> pessoa.entrar -> pessoa.sair -> PESSOAS

PORTA = porta.abrir -> porta.fechar -> PORTA

ALF_T = {| trem |}
ALF_P = {| pessoa |}
ALF_DOOR = {| porta |}


ESTACAO  = trem.aproximar -> trem.chegar -> trem.parar -> (TREM_SAIR [] TREM_AGR)

TREM_AGR = trem.esperar -> PORTA_EST

PORTA_EST = porta.abrir ->( PORTA_EST [] porta.fechar -> TREM_SAIR )

TREM_SAIR = trem.sair -> ESTACAO

ALF_EST = {| trem, porta |}
ALF_P_EST = {| pessoa, porta |}

PESSOAS_EST = porta.abrir -> (PESSOA_IN [] PESSOA_OUT)

PESSOA_IN = pessoa.entrar -> pessoa.esperar -> (porta.fechar -> PESSOA_ON [] pessoa.sair -> PESSOA_OUT)

PESSOA_ON = pessoa.esperar -> (PESSOA_ON [] porta.abrir -> pessoa.sair -> PESSOA_OUT) 

PESSOA_OUT = porta.fechar -> PESSOAS_EST

-- fazer o paralelismo entre uma estação de trem e pessoas chegando
ESTACAO2 = PESSOAS_EST [ALF_P_EST || ALF_EST] ESTACAO

assert ESTACAO2 :[deadlock free]

-- fazer varios trens e varias pessoas 
-- i -> ID do trem, e -> ID da estação
TRENS(i,e) = estacao.i.aproximar.e -> estacao.i.chegar.e -> estacao.i.parar.e -> estacao.i.sair.e ->(if(e == 2) then STOP
																											else TRENS(i, e+1))

TESTE = TRENS(1,1) ||| TRENS(2,1)

PEOPLE(i, e) = people.i.aproximar?e:EST_ID -> people.i.chegar.e -> people.i.esperar.e -> people.i.entrar.e -> people.i.sair.e -> PEOPLE(i, e)

--TESTE2 = PEOPLE(1) ||| PEOPLE(2) ||| PEOPLE(3) ||| PEOPLE(4) ||| PEOPLE(5)


DOOR(i, e) = door.i.abrir.e -> door.i.fechar.e -> (if(e == 2) then STOP
														else DOOR(i, e+1))

TESTE3 = DOOR(1,1)

SysTREM_DOOR(i,e) = estacao.i.aproximar.e -> estacao.i.chegar.e -> estacao.i.parar.e -> (SysTREM_Wait(i,e) [] SysTREM_LEAVE(i,e))

SysTREM_Wait(i,e) = estacao.i.esperar.e -> DOOR_OPEN(i,e)

DOOR_OPEN(i,e) = door.i.abrir.e -> (DOOR_OPEN(i,e) [] DOOR_CLOSE(i,e))

DOOR_CLOSE(i,e) = door.i.fechar.e -> SysTREM_LEAVE(i,e)

SysTREM_LEAVE(i,e) = estacao.i.sair.e -> (if(e == 2) then STOP
											else SysTREM_DOOR(i, e+1))

SysTESTE = SysTREM_DOOR(0,0)

SysPEOPLE_DOOR(i,e, qnt) = door.i.abrir.e -> (if(qnt > 0) then (PEOPLE_IN(i,e,qnt +1) [] (PEOPLE_LEAVE(i,e,qnt) [] CLOSE_DOOR(i,e,qnt)))
												else (PEOPLE_IN(i,e,qnt+1) [] CLOSE_DOOR(i,e,qnt)))

PEOPLE_IN(i,e, qnt) = people.i.entrar.e ->  (PEOPLE_LEAVE(i,e,qnt) [] PEOPLE_WAIT(i,e,qnt))

PEOPLE_WAIT(i,e, qnt) = people.i.esperar.e -> (PEOPLE_WAIT(i,e, qnt) [] (CLOSE_DOOR(i,e, qnt) [] PEOPLE_LEAVE(i,e, qnt-1)))

CLOSE_DOOR(i,e, qnt) = door.i.fechar.e -> (if(e == 2) then STOP
										else (SysPEOPLE_DOOR(i,e+1, qnt)))

PEOPLE_LEAVE(i,e, qnt) = people.i.sair.e -> (if (qnt > 0 and e < 2) then (PEOPLE_LEAVE(i,e,qnt -1) [] (SysPEOPLE_DOOR(i,e,qnt))[] CLOSE_DOOR(i,e,qnt))
												else (SysPEOPLE_DOOR(i,e,qnt) [] CLOSE_DOOR(i,e,qnt))) 

SysTESTE2 = SysPEOPLE_DOOR(0,0,0)